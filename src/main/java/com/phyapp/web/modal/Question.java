package com.phyapp.web.modal;
// Generated Aug 27, 2016 8:17:55 PM by Hibernate Tools 4.3.1.Final

import static javax.persistence.GenerationType.IDENTITY;

import java.util.LinkedList;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;

/**
 * Question generated by hbm2java
 */
@Entity
@Table(name = "question", catalog = "physiologydb")
public class Question implements java.io.Serializable {

	private Integer id;
	private Questiontype questiontype;
	private Integer testType;
	private String question;
	private List<Answers> answerses = new LinkedList<Answers>();
	private List<TesttypeHasQuestion> testtypeHasQuestions = new LinkedList<TesttypeHasQuestion>();

	public Question() {
	}

	public Question(Questiontype questiontype) {
		this.questiontype = questiontype;
	}

	public Question(Questiontype questiontype, Integer testType, String question, List<Answers> answerses,
			List<TesttypeHasQuestion> testtypeHasQuestions) {
		this.questiontype = questiontype;
		this.testType = testType;
		this.question = question;
		this.answerses = answerses;
		this.testtypeHasQuestions = testtypeHasQuestions;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "optionType_id", nullable = false)
	public Questiontype getQuestiontype() {
		return this.questiontype;
	}

	public void setQuestiontype(Questiontype questiontype) {
		this.questiontype = questiontype;
	}

	@Column(name = "testType")
	public Integer getTestType() {
		return this.testType;
	}

	public void setTestType(Integer testType) {
		this.testType = testType;
	}

	@Column(name = "question")
	public String getQuestion() {
		return this.question;
	}

	public void setQuestion(String question) {
		this.question = question;
	}

	

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "question")
	@OrderBy("id")
	public List<TesttypeHasQuestion> getTesttypeHasQuestions() {
		return this.testtypeHasQuestions;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "question")
	@OrderBy("id")
	public List<Answers> getAnswerses() {
		return answerses;
	}

	public void setAnswerses(List<Answers> answerses) {
		this.answerses = answerses;
	}

	public void setTesttypeHasQuestions(List<TesttypeHasQuestion> testtypeHasQuestions) {
		this.testtypeHasQuestions = testtypeHasQuestions;
	}

}
