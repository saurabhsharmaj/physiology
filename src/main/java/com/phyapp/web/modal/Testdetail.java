package com.phyapp.web.modal;
// Generated Aug 27, 2016 8:17:55 PM by Hibernate Tools 4.3.1.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Testdetail generated by hbm2java
 */
@Entity
@Table(name = "testdetail", catalog = "physiologydb")
public class Testdetail implements java.io.Serializable {

	private Integer id;
	private Testtype testtype;
	private UserDetail userDetail;
	private Integer score;
	private Date updatedOn;
	private Set<Testhistory> testhistories = new HashSet<Testhistory>(0);

	public Testdetail() {
	}

	public Testdetail(Testtype testtype, UserDetail userDetail, Integer score, Date updatedOn,
			Set<Testhistory> testhistories) {
		this.testtype = testtype;
		this.userDetail = userDetail;
		this.score = score;
		this.updatedOn = updatedOn;
		this.testhistories = testhistories;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "testtypeid")
	public Testtype getTesttype() {
		return this.testtype;
	}

	public void setTesttype(Testtype testtype) {
		this.testtype = testtype;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "userid")
	public UserDetail getUserDetail() {
		return this.userDetail;
	}

	public void setUserDetail(UserDetail userDetail) {
		this.userDetail = userDetail;
	}

	@Column(name = "score")
	public Integer getScore() {
		return this.score;
	}

	public void setScore(Integer score) {
		this.score = score;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "updatedOn", length = 10)
	public Date getUpdatedOn() {
		return this.updatedOn;
	}

	public void setUpdatedOn(Date updatedOn) {
		this.updatedOn = updatedOn;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "testdetail")
	public Set<Testhistory> getTesthistories() {
		return this.testhistories;
	}

	public void setTesthistories(Set<Testhistory> testhistories) {
		this.testhistories = testhistories;
	}

}
