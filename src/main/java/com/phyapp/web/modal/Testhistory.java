package com.phyapp.web.modal;
// Generated Aug 27, 2016 8:17:55 PM by Hibernate Tools 4.3.1.Final

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Testhistory generated by hbm2java
 */
@Entity
@Table(name = "testhistory", catalog = "physiologydb")
public class Testhistory implements java.io.Serializable {

	private Integer id;
	private Questiontype questiontype;
	private Testdetail testdetail;
	private Testtype testtype;
	private UserDetail userDetail;
	private Integer questionId;
	private Integer selectedTypeId;
	private String selectedOptionValue;
	private Integer optionscore;
	private Date updatedOn;

	public Testhistory() {
	}

	

	public Testhistory(Integer id, Questiontype questiontype, Testdetail testdetail, Testtype testtype,
			UserDetail userDetail, Integer questionId, Integer selectedTypeId, String selectedOptionValue,
			Integer optionscore, Date updatedOn) {
		this.id = id;
		this.questiontype = questiontype;
		this.testdetail = testdetail;
		this.testtype = testtype;
		this.userDetail = userDetail;
		this.questionId = questionId;
		this.selectedTypeId = selectedTypeId;
		this.selectedOptionValue = selectedOptionValue;
		this.optionscore = optionscore;
		this.updatedOn = updatedOn;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "questionTypeId")
	public Questiontype getQuestiontype() {
		return this.questiontype;
	}

	public void setQuestiontype(Questiontype questiontype) {
		this.questiontype = questiontype;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "testdetail_id", nullable = false, insertable = false, updatable = false)
	public Testdetail getTestdetail() {
		return this.testdetail;
	}

	public void setTestdetail(Testdetail testdetail) {
		this.testdetail = testdetail;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "testTypeId")
	public Testtype getTesttype() {
		return this.testtype;
	}

	public void setTesttype(Testtype testtype) {
		this.testtype = testtype;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "userid")
	public UserDetail getUserDetail() {
		return this.userDetail;
	}

	public void setUserDetail(UserDetail userDetail) {
		this.userDetail = userDetail;
	}

	@Column(name = "questionId")
	public Integer getQuestionId() {
		return this.questionId;
	}

	public void setQuestionId(Integer questionId) {
		this.questionId = questionId;
	}

	@Column(name = "selectedTypeId")
	public Integer getSelectedTypeId() {
		return this.selectedTypeId;
	}

	public void setSelectedTypeId(Integer selectedTypeId) {
		this.selectedTypeId = selectedTypeId;
	}

	@Column(name = "selectedOptionValue")
	public String getSelectedOptionValue() {
		return this.selectedOptionValue;
	}

	public void setSelectedOptionValue(String selectedOptionValue) {
		this.selectedOptionValue = selectedOptionValue;
	}

	@Column(name = "optionscore")
	public Integer getOptionscore() {
		return this.optionscore;
	}

	public void setOptionscore(Integer optionscore) {
		this.optionscore = optionscore;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "updatedOn", length = 10)
	public Date getUpdatedOn() {
		return this.updatedOn;
	}

	public void setUpdatedOn(Date updatedOn) {
		this.updatedOn = updatedOn;
	}

}
